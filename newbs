import pandas as pd
import umap
import hdbscan
from sentence_transformers import SentenceTransformer
from sklearn.feature_extraction.text import CountVectorizer

class SimpleTextClustering:
    def __init__(self, input_df, text_column="short_description"):
        self.df = input_df.copy()
        self.text_column = text_column
        self.model = SentenceTransformer("all-MiniLM-L6-v2")
        self.umap_model = umap.UMAP(
            n_neighbors=10, 
            n_components=100, 
            min_dist=0.0, 
            metric="cosine", 
            random_state=42
        )
        self.clusterer = hdbscan.HDBSCAN(
            min_cluster_size=10, 
            min_samples=1, 
            metric="euclidean", 
            cluster_selection_method="eom", 
            prediction_data=True
        )
        self.vectorizer = CountVectorizer(
            stop_words="english", 
            ngram_range=(1, 2), 
            min_df=1
        )

    def encode_texts(self, texts):
        return self.model.encode(texts, convert_to_numpy=True)

    def fit(self):
        self.df[self.text_column] = self.df[self.text_column].fillna("")
        texts = self.df[self.text_column].tolist()
        embeddings = self.encode_texts(texts)
        reduced_embeddings = self.umap_model.fit_transform(embeddings)
        labels = self.clusterer.fit_predict(reduced_embeddings)
        self.df["Cluster"] = labels
        return self.df

    def predict(self, new_texts):
        if isinstance(new_texts, str):
            new_texts = [new_texts]
        embeddings = self.encode_texts(new_texts)
        reduced_embeddings = self.umap_model.transform(embeddings)
        return self.clusterer.approximate_predict(reduced_embeddings)

df = pd.read_csv("incident_gaf1_100k.csv", encoding="latin1")
clustering_model = SimpleTextClustering(df)
clustered_df = clustering_model.fit()
import ace_tools as tools
tools.display_dataframe_to_user(name="Clustered Data", dataframe=clustered_df)
