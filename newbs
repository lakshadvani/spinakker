import pandas as pd
import umap
import hdbscan
from sentence_transformers import SentenceTransformer
from sklearn.feature_extraction.text import CountVectorizer

class SimpleTextClustering:
    def __init__(self, input_df, text_column="short_description"):
        """
        Initialize text clustering pipeline.
        :param input_df: DataFrame containing text data.
        :param text_column: Column to cluster (default: 'short_description').
        """
        self.df = input_df.copy()
        self.text_column = text_column

        # Models
        self.model = SentenceTransformer("sentence-transformers/all-MiniLM-L6-v2")
        self.umap_model = umap.UMAP(n_components=2, metric="cosine", random_state=42, low_memory=True)
        self.clusterer = hdbscan.HDBSCAN(min_cluster_size=10, min_samples=1, metric="euclidean", core_dist_n_jobs=-1)
        self.vectorizer = CountVectorizer(stop_words="english", ngram_range=(1, 2), min_df=1)

    def encode_texts(self, texts):
        """Convert texts to embeddings using SentenceTransformer."""
        return self.model.encode(texts, convert_to_numpy=True)

    def fit(self):
        """Runs the clustering pipeline: encoding, dimensionality reduction, and clustering."""
        # Step 1: Get text data
        self.df[self.text_column] = self.df[self.text_column].fillna("")
        texts = self.df[self.text_column].tolist()

        # Step 2: Generate embeddings
        embeddings = self.encode_texts(texts)

        # Step 3: Reduce dimensionality
        reduced_embeddings = self.umap_model.fit_transform(embeddings)

        # Step 4: Cluster texts
        labels = self.clusterer.fit_predict(reduced_embeddings)

        # Step 5: Store results
        self.df["Cluster"] = labels
        return self.df

    def predict(self, new_texts):
        """Predict cluster for new texts."""
        if isinstance(new_texts, str):
            new_texts = [new_texts]
        embeddings = self.encode_texts(new_texts)
        reduced_embeddings = self.umap_model.transform(embeddings)
        return self.clusterer.predict(reduced_embeddings)

# Example Usage:
df = pd.read_csv("incident_gaf1_100k.csv", encoding="latin1")  # Load dataset
clustering_model = SimpleTextClustering(df)  # Initialize model
clustered_df = clustering_model.fit()  # Run clustering
import ace_tools as tools
tools.display_dataframe_to_user(name="Clustered Data", dataframe=clustered_df)
